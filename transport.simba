 {$UNDEF SCRIPT_ID}
{$DEFINE SCRIPT_ID := 'a398a123-63fd-4f13-936b-3963354fb4c1'}
{$UNDEF SCRIPT_REVISION}
{$DEFINE SCRIPT_REVISION := '1'}
{$IFDEF WINDOWS}
{$DEFINE SCRIPT_GUI}
{$ENDIF}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}
{$include_once ./RSTeleports.simba}

type
  TUniversalTransport = record (TBaseBankScript)
    //config
    ardougneCape: TRSItem;
    fairyTeleportItem: EFairyTeleportItem;
    cacheRSW: TRSWalker;
  end;

procedure TAntiban.Setup(); override;
begin
  self.Skills := [ERSSkill.TOTAL, ERSSkill.FLETCHING];
  self.MinZoom := 5;
  self.MaxZoom := 20;
  inherited;
end;

procedure TUniversalTransport.Init(fairyTeleportItem: EFairyTeleportItem; ardougneCape: TRSItem); overload;
var
  regions: TBoxArray;
begin
  self.cacheRSW.Setup();
  regions := [Box(cacheRSW.GetMyPos(), 400, 400)];
  if not RSClient.RemoteInput.IsSetup() then RSClient.RemoteInput.Setup();
  self.fairyTeleportItem := fairyTeleportItem;
  self.ardougneCape := ardougneCape;
  WriteLn('RSW Initializing ', regions);
  self.RSW.WebGraph := WaspWeb;
  self.RSW.AdaptiveWalk := True;
  Options.SetZoomLevel(SRL.TruncatedGauss(1, 15));
  Mouse.Speed := 28;
  Mouse.MissChance := 1;
  Mouse.Distribution := MOUSE_DISTRIBUTION_GAUSS;
end;

procedure TUniversalTransport.overwriteRegions(regions: TBoxArray);
begin
  self.RSW.Setup(regions);
end;

function TUniversalTransport.getContainingRegion(destination: TPoint): TRSNamedRegion;
var
  region: TRSNamedRegion;
begin
  for region in RSNamedRegionsArray do
  begin
    WriteLn(region.Bounds, destination);
    if region.Bounds.Contains(destination) then
      Exit(region);
  end;
  WriteLn('Region not found for ' + ToStr(destination));
  region := ['Unknown', Box(destination, 100, 100)];
  Exit(region);
end;

function TUniversalTransport.pathLength(path: TPointArray): Int32;
var
  total: Double;
  i: Int32;
begin
  // if the path contains 1 or 0 points then return -1
  if path.Len() < 2 then Exit(-1);
  for i := 1 to (path.Len() - 1) do
    // TODO fix by convert this to int
    total += path[i-1].DistanceTo(path[i]);
  Exit(Floor(total));
end;

function TUniversalTransport.pathLength(point1, point2: TPoint): Int32; overload;
var
  path: TPointArray := self.rsw.WebGraph.PathBetween(point1, point2);
begin
  Exit(self.pathLength(path));
end;

// gets closest teleport to destination that has a connecting path nearby
function TUniversalTransport.getIdealTeleport(destination: TPoint; teleports: array of TTeleportLocation): TTeleportLocation;
var
  currentClosest: TTeleportLocation;
  pathBetween: TPointArray;
begin
  for currentClosest in RSTeleports.sortTeleportsByDistance(destination, teleports) do
  begin
    pathBetween := self.rsw.WebGraph.PathBetween(destination, currentClosest.worldPoint);
    if pathBetween.Len() > 0 then
      Exit(currentClosest);
  end;

  raise 'No teleport has a path connecting to destination ' + ToStr(destination);
end;

function TUniversalTransport.getConnectingTeleports(destination: TPoint; teleports: array of TTeleportLocation): array of TTeleportLocation;
var
  currentClosest: TTeleportLocation;
  pathBetween: TPointArray;
  connectingTeleports: array of TTeleportLocation;
  teleportsByDistance: array of TTeleportLocation;
begin
  teleportsByDistance := RSTeleports.sortTeleportsByDistance(destination, teleports);
  WriteLn 'Getting teleports that connect to ' + ToString(destination);
  for currentClosest in teleportsByDistance do
  begin
    try
      pathBetween := self.rsw.WebGraph.PathBetween(destination, currentClosest.worldPoint);
    except
      // we don't want to raise if there is no pathbetween
    end;
    if pathBetween.Len() > 0 then
      connectingTeleports += currentClosest;
    // this method is slow, limit to finding 3 teleports
    if Length(connectingTeleports) > 2 then
      Exit(connectingTeleports);
  end;
  WriteLn('Amount of connecting teleports: ', Length(connectingTeleports));
  if (Length(connectingTeleports) = 0) then
  raise 'No teleport has a path connecting to destination ' + ToStr(destination);
  Exit(connectingTeleports);
end;

function TUniversalTransport.getConnectingTeleportPaths(destination: TPoint; teleports: array of TTeleportLocation): T2DPointArray;
var
  currentClosest: TTeleportLocation;
  pathBetween: TPointArray;
  paths: T2DPointArray;
  teleportsByDistance: array of TTeleportLocation;
begin
  teleportsByDistance := RSTeleports.sortTeleportsByDistance(destination, teleports);
  WriteLn 'Getting teleports that connect to ' + ToString(destination);
  for currentClosest in teleportsByDistance do
  begin
    try
      pathBetween := self.rsw.WebGraph.PathBetween(destination, currentClosest.worldPoint);
    except
      // we don't want to raise if there is no pathbetween
    end;
    if pathBetween.Len() > 0 then
      paths += pathBetween;
    // this method is slow, limit to finding 3 teleports
    if Length(paths) > 2 then
      Exit(paths);
  end;
  WriteLn('Amount of connecting teleports: ', Length(paths));
  if (Length(paths) = 0) then
  raise 'No teleport has a path connecting to destination ' + ToStr(destination);
  Exit(paths);
end;

function TUniversalTransport.getPathRegion(path: TPointArray): TBox;
begin
  Exit(path.Bounds().Expand(100));
end;

function TUniversalTransport.getRegionBetween(point1, point2: TPoint): TBox;
var
  path: TPointArray := self.rsw.WebGraph.PathBetween(point1, point2, 1);
begin
  Exit(self.getPathRegion(path));
end;

function TUniversalTransport.run(teleportLocation: TTeleportLocation): Boolean; overload;
var
  didTeleport: Boolean;
begin
  WriteLn 'Trying to teleport to:';
  WriteLn teleportLocation;
  case teleportLocation.teleportType of
    ETeleportType.JEWELLERY: didTeleport := self.handleJewelleryTeleport(teleportLocation);
    ETeleportType.ANCIENT_MAGICKS,
    ETeleportType.ARCEUUS_MAGIC,
    ETeleportType.LUNAR_MAGIC,
    ETeleportType.NORMAL_MAGIC: didTeleport := self.handleMagicTeleport(teleportLocation);
    ETeleportType.FAIRY_RING: didTeleport := self.handleFairyRingTeleport(teleportLocation);
  end;

  Exit(didTeleport);
end;

function TUniversalTransport.run(destination: TPoint): Boolean; overload;
var
  teleportLocation: TTeleportLocation;
  didTeleport: Boolean;
  attempt: Int32;
begin
  teleportLocation := self.getIdealTeleport(destination, RSTeleports.RSTeleportsArray);
  WriteLn 'Ideal teleport found to be:';
  WriteLn teleportLocation;
  case teleportLocation.teleportType of
    ETeleportType.JEWELLERY: didTeleport := self.handleJewelleryTeleport(teleportLocation);
    ETeleportType.ANCIENT_MAGICKS,
    ETeleportType.ARCEUUS_MAGIC,
    ETeleportType.LUNAR_MAGIC,
    ETeleportType.NORMAL_MAGIC: didTeleport := self.handleMagicTeleport(teleportLocation);
    ETeleportType.FAIRY_RING: didTeleport := self.handleFairyRingTeleport(teleportLocation);
  end;

  for attempt in [0..5] do
  try
    if didTeleport then
    begin
      self.overwriteRegions([self.getRegionBetween(cacheRSW.GetMyPos(), destination)]);
      self.RSW.WebWalk(destination, 20);
    end;
  except
    WaitUntil(self.getContainingRegion(destination).Bounds.Contains(self.rsw.GetMyPos()), 200, 5000);

  if attempt = 5 then raise 'Bomba - rsw cannae connect lassie';
  end;

  Exit(didTeleport);
end;

function TUniversalTransport.genericJewelleryBankTeleport(): Boolean;
begin
  if WaitUntil(Equipment.ContainsAny(getChargedJewelleryNames('Amulet of Glory')), 200, 5000) then
    Result := self.handleJewelleryTeleport(RSTeleports.GRAND_EXCHANGE)
  else if WaitUntil(Equipment.ContainsAny(getChargedJewelleryNames('Ring of Dueling')), 200, 5000) then
    Result := self.handleJewelleryTeleport(RSTeleports.CASTLE_WARS)
  else if WaitUntil(Equipment.ContainsAny(getChargedJewelleryNames('Ring of Wealth')), 200, 5000) then
    Result := self.handleJewelleryTeleport(RSTeleports.EDGEVILLE)
  else if WaitUntil(Equipment.ContainsAny(getChargedJewelleryNames('Games Necklace')), 200, 5000) then
    Result := self.handleJewelleryTeleport(RSTeleports.WINTERTODT_CAMP)
  else if WaitUntil(Inventory.ContainsAny(getChargedJewelleryNames('Amulet of Glory')), 200, 5000) then
    Result := self.handleJewelleryTeleport(RSTeleports.GRAND_EXCHANGE)
  else if WaitUntil(Inventory.ContainsAny(getChargedJewelleryNames('Ring of Dueling')), 200, 5000) then
    Result := self.handleJewelleryTeleport(RSTeleports.CASTLE_WARS)
  else if WaitUntil(Inventory.ContainsAny(getChargedJewelleryNames('Ring of Wealth')), 200, 5000) then
    Result := self.handleJewelleryTeleport(RSTeleports.EDGEVILLE)
  else if WaitUntil(Inventory.ContainsAny(getChargedJewelleryNames('Games Necklace')), 200, 5000) then
    Result := self.handleJewelleryTeleport(RSTeleports.WINTERTODT_CAMP);
end;

// when location selection is in chat interface
function TUniversalTransport.handleChatJewellery(teleportLocation: TTeleportLocation): Boolean;
var
  jewellery: TRSItem := teleportLocation.item;
begin
  if not (teleportLocation.teleportType = ETeleportType.JEWELLERY) then
    raise 'Requires teleport type jewellery. Got ' + ToStr(teleportLocation.teleportType);

  WriteLn("Clicking ", teleportLocation.destination);
  if Chat.ClickOption(teleportLocation.destination, False, [CHAT_COLOR_BLACK]) then
    Exit(True);
end;

// when location selection is in middle of screen
function TUniversalTransport.handleMiddleScreenJewellery(teleportLocation: TTeleportLocation): Boolean;
var
  textColor: TColor := 668230;
  textColorTPA: TPointArray;
  clusteredText: T2DPointArray;
  foundTextBox: TBox;
  textBox: TBox;
  findInterfaceAttempts: Int32;
begin
  if not (teleportLocation.teleportType = ETeleportType.JEWELLERY) then
    raise 'Requires teleport type jewellery. Got ' + ToStr(teleportLocation.teleportType);

  repeat
    SRL.FindColors(textColorTPA, textColor, MainScreen.Bounds());
    clusteredText := textColorTPA.Cluster(6, 1);
    if not (clusteredText.Len() > 8) then
      Wait(SRL.TruncatedGauss(400, 600));

    findInterfaceAttempts += 1;
    // there are like 12 clusters, so just check if there are more than 8 for false positives
  until (clusteredText.Len() > 8) or (findInterfaceAttempts > 4);

  for textBox in clusteredText.ToTBA() do
  begin
    OCR.LocateText(textBox, teleportLocation.destination, RS_FONT_PLAIN_12, TOCRColorRule.Create([textColor]), foundTextBox);
    if foundTextBox.Area > 1 then
      begin
        Mouse.Move(foundTextBox.Center());
        WriteLn MainScreen.GetUpText();
        //if MainScreen.IsUpText('Continue') then
        //begin
        Mouse.Click(MOUSE_LEFT);
        Exit(True);
        //end;
      end;
  end;
  raise 'Unable to find ' + teleportLocation.destination + ' in menu for ' + ToStr(teleportLocation.item);
end;

function TUniversalTransport.handleJewelleryTeleport(teleportLocation: TTeleportLocation): Boolean;
var
  startPosition: TPoint := cacheRSW.GetMyPos();
  chargedJewellery: TRSItem;
  chargedVariants: TRSItemArray := getChargedJewelleryNames(teleportLocation.item);
  didTeleport: Boolean;
  middleScreenJewellery: TStringArray := ['skills necklace'];
begin
  for chargedJewellery in chargedVariants do
  begin
    WriteLn("Searching for ", chargedJewellery, " in inventory");
    if Inventory.ContainsItem(chargedJewellery) then
    begin
      WriteLn("Searching for ", chargedJewellery, " Rub");
      WaitUntil(Inventory.ClickItem(chargedJewellery, "Rub"), 200, 5000);
      if middleScreenJewellery.Contains(ToStr(teleportLocation.item).Lower()) then
        didTeleport := self.handleMiddleScreenJewellery(teleportLocation)
      else
        didTeleport := self.handleChatJewellery(teleportLocation);

      if didTeleport then
        Exit(WaitUntil(cacheRSW.GetMyPos().DistanceTo(startPosition) > 10, 200, 5000));
    end;
  end;

  for chargedJewellery in chargedVariants do
  begin
    WriteLn("Searching for ", chargedJewellery, " in Equipment");
    Equipment.Open();
    if Equipment.ContainsItem(chargedJewellery) then
    begin
      WriteLn("Clicking ", chargedJewellery, " ", teleportLocation.destination);
      if WaitUntil(Equipment.ClickItem(chargedJewellery, teleportLocation.destination), 200, 5000) then;
        Exit(True);
    end;
  end;
end;


function TUniversalTransport.withdrawTeleportItem(teleportLocation: TTeleportLocation): Boolean;
var
  chargedJewellery: TRSItem;
  chargedVariants: TRSItemArray;
  teleportTabName: String;
begin
  WriteLn('Trying to withdraw');
  if not Bank.IsOpen(2000, 200) then Exit(False);
  WriteLn('bank is open');
  case teleportLocation.teleportType of
    ETeleportType.JEWELLERY:
    begin
      chargedVariants := getChargedJewelleryNames(teleportLocation.item);
      for chargedJewellery in chargedVariants do
      begin
        WriteLn('Withdrawing', chargedJewellery);
        if self.Withdraw([chargedJewellery, 1, False]) then
          Exit(True);
        if WaitUntil(Inventory.ContainsItem(chargedJewellery), 200, 5000) then
          Exit(True);
      end;
    end;
    ETeleportType.ANCIENT_MAGICKS,
    ETeleportType.ARCEUUS_MAGIC,
    ETeleportType.LUNAR_MAGIC,
    ETeleportType.NORMAL_MAGIC:
    begin
      teleportTabName := teleportLocation.destination.Lower() + " teleport";
      WriteLn('Withdrawing: ', teleportTabName);
      if self.Withdraw([teleportTabName, 1, False]) then
        Exit(True);
      if WaitUntil(Inventory.ContainsItem(teleportTabName), 200, 5000) then
        Exit(True);
    end;
  end;
end;

function TUniversalTransport.handleMagicTeleport(teleportLocation: TTeleportLocation): Boolean;
var
  teleportTabName: String := teleportLocation.destination.Lower() + " teleport";
begin
  WriteLn 'Looking for ' + teleportTabName;
  if WaitUntil(Inventory.ClickItem(teleportTabName), 200, 5000) then
    Exit(True);
end;

function TUniversalTransport.findFairyRingMiddle(fairyRing: TTeleportLocation): TPoint;
var
  fairyRingGreen: TCTS2Color := CTS2(4089424, 10, 0.14, 0.19);
  fairyRingBrown: TCTS2Color := CTS2(4807548, 17, 0.07, 0.21);
  fairyRingButterflyWhite: TCTS2Color := CTS2(14476264, 4, 0.36, 0.64);
  brownTPA: TPointArray;
  greenTPA: TPointArray;
  butteryflyTPA: TPointArray;
  searchBox: TBox := Mainscreen.Bounds();
  nearbyColorPoints: TPointArray;
begin
  SRL.FindColors(greenTPA, fairyRingGreen, searchBox);
  SRL.FindColors(brownTPA, fairyRingBrown, searchBox);
  nearbyColorPoints := brownTPA.Grow(2).PointsInRangeOf(greenTPA.Grow(2), 1, 10);
  if (Length(nearbyColorPoints) > 0) then
    Exit(nearbyColorPoints.Grow(50).Erode(30).MinAreaCircle().mean());

  SRL.FindColors(butteryflyTPA, fairyRingButterflyWhite, searchBox);
  if (Length(butteryflyTPA) > 0) then
    Exit(butteryflyTPA.RandomValue());

  Exit(rsw.GetTileMS(fairyRing.worldPoint).mean());
end;

function TUniversalTransport.getFairyDialTeleportBox(): TBox;
var
  teleportBox: TBox;
  attempt: Int32;
begin
  for attempt in [1..5] do
  begin
    OCR.LocateText(MainScreen.Bounds, 'Teleport to this location', RS_FONT_QUILL_8, TOCRColorRule.Create([8256]), teleportBox);
    Wait(300, 500);
    if not (Result = teleportBox) then Exit(teleportBox);
  end;
  raise 'Unable to find fairy dial teleport box in 5 tries';
end;

function TUniversalTransport.getWalkableFairyRing(maximumDistance: Int32): TTeleportLocation;
var
  sortedWalkableRings: array of TTeleportLocation;
  ringTeleport: TTeleportLocation;
  myPos: TPoint := cacheRSW.GetMyPos();
begin
  try
    sortedWalkableRings := self.getConnectingTeleports(myPos, RSTeleports.FairyRingTeleports);
  except
    WriteLn 'There is not a walkable ring nearby.';
  end;
  if Length(sortedWalkableRings) > 0 then
  begin
    for ringTeleport in sortedWalkableRings do
      if (self.pathLength(ringTeleport.worldPoint, myPos) < maximumDistance)
      and ringTeleport.dispatcherRing then
        Exit(ringTeleport);
    WriteLn('There is no walkable fairy ring');
  end;
end;

function TUniversalTransport.handleFairyRingTeleport(teleportLocation: TTeleportLocation): Boolean;
var
  scrollBarWidth: Int32 := 36;
  travelLogRectWidth: Int32 := 40;
  travelLog: TBox := Box(
    logout.bounds.x1,
    logout.bounds.Y1 + travelLogRectWidth,
    logout.bounds.X2 - scrollBarWidth,
    logout.bounds.Y2
  );
  fairyCodeTextBox: TBox;
  tempBox: TBox;
  foundCode: Boolean;
  redTextPoints: TPointArray;
  redTextColors: TIntegerArray := [4145151, 8355839];
  walkableFairyRing: TTeleportLocation;
  canFairyTeleport: Boolean := self.fairyTeleportItem = EFairyTeleportItem.DIARY;
  travelLogOpen: Boolean;
  codeFindAttempt: Int32;
  fairyTeleportStaff: TRSItem;
begin
  // make sure dramen is equipped
  WriteLn 'Searching for dramen staff';
  if not canFairyTeleport then;
  repeat
    case self.fairyTeleportItem of
      EFairyTeleportItem.DRAMEN: fairyTeleportStaff := 'Dramen staff';
      EFairyTeleportItem.LUNAR: fairyTeleportStaff := 'Lunar staff';
      EFairyTeleportItem.NONE: raise 'You either need to configure a method for fairy teleports (dramen/lunar/diary) or not use them.';
    end;
    if Inventory.ContainsItem(fairyTeleportStaff) then
      canFairyTeleport := WaitUntil(Inventory.ClickItem(fairyTeleportStaff), 500, 2000);

    if not canFairyTeleport then
      canFairyTeleport := WaitUntil(Equipment.ContainsItem(fairyTeleportStaff), 500, 2000);;

    WriteLn('Is it equipped?', canFairyTeleport);
    if not canFairyTeleport then
    begin
      // maybe remove this whole part and just raise no item in inventory; leave it up the caller to get the fairy teleport item
      WriteLn('Opening Bank');
      // teleport nearby bank if possible
      self.genericJewelleryBankTeleport();
      if not Bank.WalkOpen() then
        raise "We can't get to a bank from here: " + ToString(RSW.GetMyPos()) + ". Consider adding some jewellery to teleport with.";
      // TO DO ^ maybe add desperate teleports to banks like home teleport
      WriteLn('Withdrawing ', fairyTeleportStaff);
      if not WaitUntil(self.Withdraw([fairyTeleportStaff, 1, False]), 200, 5000) then
        raise "You do not have a dramen/lunar staff. You can turn off fairy teleports";
    end;
  until canFairyTeleport;

  WriteLn('Getting walkable fairy ring');
  walkableFairyRing := self.getWalkableFairyRing(500);

  // try to use ardy cloak if available
  if (not (ToString(self.ardougneCape) = '')) and (walkableFairyRing.worldPoint = [0,0]) then
  begin
    WriteLn('Looking for ', self.ardougneCape);
    if not Equipment.ClickItem(self.ardougneCape, 'Monastery') then
      if not Inventory.ClickItem(self.ardougneCape, 'Monastery') then
        raise "Couldn't find " + self.ardougneCape + " in inventory or equipment";

    Wait(SRL.TruncatedGauss(4000, 5500));
    // set fairy ring to walk to after teleporting
    walkableFairyRing := self.getWalkableFairyRing(500);
  end;

  // walk to nearest fairy ring
  if (walkableFairyRing.worldPoint = [0,0]) then
    raise 'Fairy ring ' + walkableFairyRing.destination + ' is not configured properly';

  self.overwriteRegions([self.getRegionBetween(cacheRSW.GetMyPos(), walkableFairyRing.worldPoint)]);
  WriteLn 'We are going to walk to ' + ToString(walkableFairyRing.worldPoint);
  self.RSW.WebWalk(walkableFairyRing.worldPoint, 40);

  // open fairy ring teleports
  WriteLn("opening fairy ring teleports");
  repeat
    repeat Mouse.Move(findFairyRingMiddle(walkableFairyRing))
    until MainScreen.IsUpText("y ring");
    Mouse.click(MOUSE_RIGHT);
    WriteLn('Selecting configure');
    ChooseOption.Select('Configure', MOUSE_LEFT);
    Wait(SRL.TruncatedGauss(3000, 4500));
    travelLogOpen := (SRL.FindColors(redTextPoints, redTextColors, travelLog) > 1);
  until travelLogOpen;

  WriteLn 'Scrolling to top of fairy rings';
  // scroll to top of fairy rings
  Mouse.move(travelLog, True);
  Mouse.scroll(SRL.TruncatedGauss(30, 50), False);
  repeat
    // look for given teleport in travel log
    tempBox := fairyCodeTextBox;
    OCR.LocateText(travelLog, teleportLocation.destination, RS_FONT_PLAIN_12, TOCRColorRule.Create([4145151, 8355839]), fairyCodeTextBox);
    foundCode := not (tempBox = fairyCodeTextBox);
    if not foundCode then
    begin
      WriteLn 'Scrolling down fairy rings';
      Mouse.move(travelLog, True);
      Mouse.scroll(Random(1, 3), True);
    end
    else
    repeat
      codeFindAttempt += 1;
      Mouse.move(fairyCodeTextBox);
    until MainScreen.IsUpText(teleportLocation.destination) or (codeFindAttempt > 3);
  until foundCode;

  // click the given teleport in travel log
  Mouse.click(fairyCodeTextBox, MOUSE_LEFT);

  // click the confirm teleport in middle of screen
  Mouse.move(self.getFairyDialTeleportBox());
  WaitUntil(MainScreen.IsUpText("Confirm"), 200, 5000);
  Mouse.click(MOUSE_LEFT);
  Exit(True);
end;

function TUniversalTransport.nearGE(): Boolean;
var
  boxAroundGE: TBox := Box(RSTeleports.GRAND_EXCHANGE.worldPoint, 400, 400);
begin
  Exit(boxAroundGE.Contains(cacheRSW.GetMyPos()));
end;

function TUniversalTransport.goToGE(): Boolean;
begin
  if self.nearGE() then
  begin
    self.overwriteRegions([self.getRegionBetween(cacheRSW.GetMyPos(), RSTeleports.GRAND_EXCHANGE.worldPoint)]);
    Result := self.RSW.WebWalk(RSTeleports.GRAND_EXCHANGE.worldPoint, 50)
  end
  else
    Result := self.run(RSTeleports.GRAND_EXCHANGE.worldPoint);
end;

function TUniversalTransport.getConnectingBank(position: TPoint): PRSObject;
var
  currentMinimumDistance: Int32 := 100000;
  currentBank: PRSObject;
  pathDistance: Int32;
begin
  for currentBank in RSObjects.Banks do
  begin
    currentBank^.Coordinates.Sort(position);
    pathDistance := self.pathLength(currentBank^.Coordinates.First(), position);
    if (pathDistance < currentMinimumDistance)
    and (pathDistance > 0) then
      Result := currentBank;
  end;
end;

function TUniversalTransport.desperateBankOpen(): Boolean;
var
  maxDistance: Int32 := 1000;
  closestBanker: TRSObject := RSObjects.Banks.GetClosest();
  closestBankPoint: TPoint := closestBanker.Coordinates.First();
  myPos: TPoint := cacheRSW.GetMyPos();
  pathRegion: TBox := self.getRegionBetween(myPos, closestBankPoint);
  pathDistance: Int32 := self.pathLength(closestBankPoint, myPos);
  walkableBank: TRSObject;
begin
  WriteLn 'desperately opening bank';
  WriteLn(closestBankPoint);
  WriteLn('Distance to bank from current ', pathDistance);
  if pathDistance < maxDistance then
  begin
    self.overwriteRegions([pathRegion, Box(cacheRSW.GetMyPos(), 100, 100)]);
    WriteLn pathRegion;
    WriteLn myPos;
    Bank.WalkOpen(closestBanker);
    if Bank.IsOpen(5000, 200) then
      Exit(true);
  end;

  // to do: add more ways to get to bank
  if Magic.CastSpell(ERSSpell.LUMBRIDGE_HOME_TELEPORT) then
    WaitUntil(cacheRSW.GetMyPos().InBox(Box(RSTeleports.LUMBRIDGE.worldPoint, 200, 200)), 200, 15000)
  else if Magic.CastSpell(ERSSpell.EDGEVILLE_HOME_TELEPORT) then
    WaitUntil(cacheRSW.GetMyPos().InBox(Box(RSTeleports.EDGEVILLE.worldPoint, 200, 200)), 200, 15000)
  else if Magic.CastSpell(ERSSpell.MOONCLAN_TELEPORT) then
    WaitUntil(cacheRSW.GetMyPos().InBox(Box(RSTeleports.MOONCLAN.worldPoint, 200, 200)), 200, 15000)
  else if Magic.CastSpell(ERSSpell.ARCEUUS_HOME_TELEPORT) then
    WaitUntil(cacheRSW.GetMyPos().InBox(Box(RSTeleports.CIS_NORTH_OF_THE_ARCEUUS_LIBRARY.worldPoint, 500, 500)), 200, 15000)
  else raise "Couldn't go home!";

  // load path between current and bank and then walk
  pathRegion := self.getRegionBetween(walkableBank.Coordinates.first(), cacheRSW.GetMyPos);
  self.overwriteRegions([pathRegion]);
  walkableBank := self.getConnectingBank(cacheRSW.GetMyPos())^;
  Bank.WalkOpen(walkableBank);
end;


// example usage/test
//
//var
//  Transport: TUniversalTransport;
//  teleportLocation: TTeleportLocation := RSTeleports.GRAND_EXCHANGE;
//begin
//  try
//    Transport.Init(EFairyTeleportItem.DRAMEN, 'ardougne cloak 2');
//    if not Transport.run(teleportLocation) then
//    begin
//      Transport.desperateBankOpen();
//      if not Transport.withdrawTeleportItem(teleportLocation) then
//        raise 'You dont have the item needed for ' + teleportLocation.destination
//      else Bank.Close(True);
//      Transport.run(teleportLocation);
//    end;
//  except
//    WriteLn 'We ending';
//    WriteLn GetExceptionMessage();
//  end;
//end;

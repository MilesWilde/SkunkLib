 {$UNDEF SCRIPT_ID}
{$DEFINE SCRIPT_ID := 'a398a123-63fd-4f13-936b-3963354fb4c1'}
{$UNDEF SCRIPT_REVISION}
{$DEFINE SCRIPT_REVISION := '1'}
{$IFDEF WINDOWS}
{$DEFINE SCRIPT_GUI}
{$ENDIF}
{$include_once SRL-T/osr.simba}
{$include_once WaspLib/osr.simba}
{$include_once ./records.simba}
{$include_once ./rsteleports.simba}

var
  cacheRSW: TRSWalker;
begin
  cacheRSW.Setup();
end;

type
  TUniversalTransport = record (TBaseBankScript)
    destination: TPoint;
  end;

procedure TAntiban.Setup(); override;
begin
  self.Skills := [ERSSkill.TOTAL, ERSSkill.FLETCHING];
  self.MinZoom := 5;
  self.MaxZoom := 20;
  inherited;
end;

procedure TUniversalTransport.Init(MaxActions: Int32; MaxTime: Int64; destination: TPoint); overload;
var
  destinationRegion: TRSNamedRegion := self.getContainingRegion(destination);
  currentRegion: TRSNamedRegion := self.getContainingRegion(cacheRSW.GetMyPos());
  regions: TBoxArray := [RSRegions.GRAND_EXCHANGE, destinationRegion.Bounds, currentRegion.Bounds];
begin
  WriteLn('RSW Initializing ', currentRegion);
  self.Init(MaxActions, MaxTime);
  self.RSW.Setup(regions);
  self.RSW.WebGraph := WaspWeb;
  self.RSW.AdaptiveWalk := True;
  currentRegion := self.getContainingRegion(self.rsw.GetMyPos());
  Mouse.Speed := 28;
  Mouse.MissChance := 1;
  Mouse.Distribution := MOUSE_DISTRIBUTION_GAUSS;
end;

function TUniversalTransport.getContainingRegion(destination: TPoint): TRSNamedRegion;
var
  region: TRSNamedRegion;
begin
  for region in RSNamedRegionsArray do
  begin
    if region.Bounds.Contains(destination) then
      Exit(region);
  end;
end;

// gets closest teleport to destination that has a connecting path nearby
function TUniversalTransport.getIdealTeleport(destination: TPoint): TTeleportLocation;
var
  currentClosest: TTeleportLocation;
  pathBetween: TPointArray;
begin
  for currentClosest in sortTeleportsByDistance(destination, RSTeleportsArray) do
  begin
    pathBetween := self.rsw.WebGraph.PathBetween(destination, currentClosest.worldPoint);
    if pathBetween.Len() > 0 then
      Exit(currentClosest);
  end;

  raise 'No teleport has a path connecting to destination ' + ToStr(destination);
end;

function TUniversalTransport.run(destination: TPoint): Boolean;
var
  teleportLocation: TTeleportLocation;
  didTeleport: Boolean;
  attempt: Int32;
begin
  self.Init(1000, 100000, destination);
  teleportLocation := self.getIdealTeleport(destination);
  WriteLn 'Ideal teleport found to be:';
  WriteLn teleportLocation;
  case teleportLocation.teleportType of
    ETeleportType.JEWELLERY: didTeleport := self.handleJewelleryTeleport(teleportLocation);
    ETeleportType.ANCIENT_MAGICKS,
    ETeleportType.ARCEUUS_MAGIC,
    ETeleportType.LUNAR_MAGIC,
    ETeleportType.NORMAL_MAGIC: didTeleport := self.handleMagicTeleport(teleportLocation);
    ETeleportType.FAIRY_RING: didTeleport := self.handleFairyRingTeleport(teleportLocation);
  end;

  for attempt in [0..5] do
  try
    if didTeleport then
      self.RSW.WebWalk(destination, 20);
  except
    WaitUntil(self.getContainingRegion(destination).Bounds.Contains(self.rsw.GetMyPos()), 200, 5000);

  if attempt = 5 then raise 'Bomba - rsw cannae connect lassie';
  end;

  Exit(True);
end;

function TUniversalTransport.handleJewelleryTeleport(teleportLocation: TTeleportLocation): Boolean;
var
  chargedJewellery: TRSItem;
  chargedVariants: TRSItemArray := getChargedJewelleryNames(teleportLocation.item);
begin
  for chargedJewellery in chargedVariants do
  begin
    WriteLn("Searching for ", chargedJewellery);
    if Inventory.ContainsItem(chargedJewellery) then
    begin
      WriteLn("Searching for ", chargedJewellery, " Rub");
      WaitUntil(Inventory.ClickItem(chargedJewellery, "Rub"), 200, 5000);
      WriteLn("Clicking ", teleportLocation.destination);
      if WaitUntil(Chat.ClickOption(teleportLocation.destination, False, [CHAT_COLOR_BLACK]), 200, 5000) then
        Exit(True);
    end;
  end;

  for chargedJewellery in chargedVariants do
  begin
    WriteLn('Opening Equipment');
    Equipment.Open();
    if Equipment.ContainsItem(chargedJewellery) then
    begin
      WriteLn("Clicking ", chargedJewellery, " Rub");
      WaitUntil(Inventory.ClickItem(chargedJewellery, "Rub"), 200, 5000);
      WriteLn("Clicking ", teleportLocation.destination);
      if WaitUntil(Chat.ClickOption(teleportLocation.destination, False, [CHAT_COLOR_BLACK]), 200, 5000) then
        Exit(True);
    end;
  end;
  for chargedJewellery in chargedVariants do
  begin
    WriteLn('Opening Bank');
    Bank.WalkOpen();
    WriteLn('Withdrawing', chargedJewellery);
    if WaitUntil(self.Withdraw([chargedJewellery, 1, False]), 200, 5000) then
    begin
      WaitUntil(Bank.Close(True), 200, 5000);
      WriteLn("Clicking ", chargedJewellery, " Rub from Inventory");
      WaitUntil(Inventory.ClickItem(chargedJewellery, "Rub"), 200, 5000);
      WriteLn("Clicking ", teleportLocation.destination);
      if WaitUntil(Chat.ClickOption(teleportLocation.destination, False, [CHAT_COLOR_BLACK]), 200, 5000) then
        Exit(True);
    end;
  end;
end;

function TUniversalTransport.handleMagicTeleport(teleportLocation: TTeleportLocation): Boolean;
var
  teleportTabName: String := teleportLocation.destination.Lower() + " teleport";
begin
  WriteLn 'Looking for ' + teleportTabName;
  if WaitUntil(Inventory.ClickItem(teleportTabName), 200, 5000) then
    Exit(True);

  WriteLn('Opening Bank');
  Bank.WalkOpen();
  if WaitUntil(self.Withdraw([teleportTabName, 1, False]), 200, 5000) then
  begin
    WaitUntil(Bank.Close(True), 200, 5000);
    WriteLn("Clicking ", teleportTabName);
    if WaitUntil(Inventory.ClickItem(teleportTabName), 200, 5000) then
      Exit(True);
  end;
end;

function TUniversalTransport.handleFairyRingTeleport(teleportLocation: TTeleportLocation): Boolean;
var
  scrollBarWidth: Int32 := 36;
  travelLogRectWidth: Int32 := 40;
  scrollBar: TBox := Box(
    logout.bounds.X2 - scrollBarWidth,
    logout.bounds.Y1,
    logout.bounds.X2,
    logout.bounds.Y2
  );
  travelLog: TBox := Box(
    logout.bounds.x1,
    logout.bounds.Y1 + travelLogRectWidth,
    logout.bounds.X2 - scrollBarWidth,
    logout.bounds.Y2
  );
  currentWorldBox: TBox := Box(
    logout.Bounds.X1,
    logout.Bounds.Y1,
    logout.Bounds.X2,
    logout.Bounds.Y1+24
  );
  fairyCodeBox: TBox;
  tempBox: TBox;
begin
  //OCR.LocateText(travelLog, teleportLocation.destination, RS_FONT_PLAIN_12, TOCRColorRule.Create([4145151, 1]), fairyCodeBox);
  Mouse.move(travelLog, True);
  Mouse.scroll(20, False);
  repeat
    tempBox := fairyCodeBox;
    OCR.LocateText(travelLog, 'D L R', RS_FONT_PLAIN_12, TOCRColorRule.Create([4145151, 8355839]), fairyCodeBox);
    Mouse.move(travelLog, True);
    Mouse.scroll(Random(1, 3), True);
  until not (tempBox = fairyCodeBox);

  Debug(fairyCodeBox);
  //Debug(travelLog);
//
//  OCR.Recognize(
//  OCR.LocateText(travelLog, 'A I R', TFontSet.
end;

function TUniversalTransport.genericJewelleryBankTeleport(): Boolean;
begin
  if WaitUntil(Equipment.ContainsAny(getChargedJewelleryNames('Ring of Wealth')), 200, 5000) then
    Result := self.run(RSTeleports.GRAND_EXCHANGE.worldPoint)
  else if WaitUntil(Equipment.ContainsAny(getChargedJewelleryNames('Ring of Dueling')), 200, 5000) then
    Result := self.run(RSTeleports.CASTLE_WARS.worldPoint)
  else if WaitUntil(Equipment.ContainsAny(getChargedJewelleryNames('Amulet of Glory')), 200, 5000) then
    Result := self.run(RSTeleports.EDGEVILLE.worldPoint)
  else if WaitUntil(Equipment.ContainsAny(getChargedJewelleryNames('Games Necklace')), 200, 5000) then
    Result := self.run(RSTeleports.WINTERTODT_CAMP.worldPoint)
  else if WaitUntil(Inventory.ContainsAny(getChargedJewelleryNames('Ring of Wealth')), 200, 5000) then
    Result := self.run(RSTeleports.GRAND_EXCHANGE.worldPoint)
  else if WaitUntil(Inventory.ContainsAny(getChargedJewelleryNames('Ring of Dueling')), 200, 5000) then
    Result := self.run(RSTeleports.CASTLE_WARS.worldPoint)
  else if WaitUntil(Inventory.ContainsAny(getChargedJewelleryNames('Amulet of Glory')), 200, 5000) then
    Result := self.run(RSTeleports.EDGEVILLE.worldPoint)
  else if WaitUntil(Inventory.ContainsAny(getChargedJewelleryNames('Games Necklace')), 200, 5000) then
    Result := self.run(RSTeleports.WINTERTODT_CAMP.worldPoint);
end;

function TUniversalTransport.nearGE(): Boolean;
begin
  Exit(self.getContainingRegion(self.RSW.GetMyPos()).Bounds = RSRegions.GRAND_EXCHANGE);
end;

function TUniversalTransport.goToGE(): Boolean;
begin
  if self.nearGE() then
    Result := self.RSW.WebWalk(RSTeleports.GRAND_EXCHANGE.worldPoint, 50)
  else
    Result := self.run(RSTeleports.GRAND_EXCHANGE.worldPoint);
end;

var 
  Transport: TUniversalTransport;

